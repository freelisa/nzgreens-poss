<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd" >
<configuration>

	<properties>
		<property name="databaseType" value="MySql"/>
	</properties>



<!-- Setting 描述 可用的值 默认值
cacheEnabled 全局的对mapper进行缓存属性的配置 true|false true
lazyLoadingEnabled
全局设置是否延迟加载，否的话，在服务启动的时候，自动加载所有的mapper
true|false
true
aggressiveLazyLoading
启用的时候，将会加载对象的所有懒属性，否则，按需加载。
true|false
true
multipleResultSetsEnabled
是否允许开启多结果集返回
true|false
true
useColumnLabel
用label替代name，不同的数据库驱动在这方面都不同
true|false
true
useGeneratedKeys
允许JDBC支持主键生成策略。这个属性是强制性的，即使你的数据库驱动不兼容
true|false
false
autoMappingBehavior
指定 MyBatis 如何自动映射列到字段/ 属性。NONE不使用自动映射，PARTIAL  只会自动映射简单, 没有嵌套的结果。FULL 会自动映射任意复杂的结果(嵌套的或其他情况) 。
NONE|PARTIAL|FULL
PARTIAL
defaultExecutorType
设置默认执行器。SIMPLE执行器无特殊处理，RESUE可以执行预编译的Statement，BATCH可以执行预编译并且支持批量更新
SIMPLE|RESUE|BATCH
SIMPLE
defaultStatementTimeout
设置默认连接超时时间
int
Not Set（NULL）
safeRowBoundsEnable
允许在嵌套的语句中使用分页处理
true|false
false
mapUnderscoreToCamelCase
允许将数据库的复合式的列名映射为驼峰法的列名
true|false
 false
localCacheScope
MyBatis使用本地缓存来放置循环引用和加快重复嵌套查询。默认的SESSION为：在session中执行的所有查询都被缓存，如果是STATEMENT，将会在语句执行的时候进行缓存，并且在两个调用间没有共享的数据，即便他们调用的是同一个sqlSession
SESSION|STATEMENT
SESSION
jdbcTypeForNull
当没有特别的JDBC类型被提供，指定空值的类型为定义值
jdbcType  enumeration。Most common are：NULL，VARCHAR and OTHER
OTHER
lazyLoadTriggerMethods
指定对象的哪些方法会被延迟加载
方法名的集合，用逗号隔开
equals,clone,hashCode,toString
defaultScriptingLanguage
指定默认动态SQL生成器
全类名
org.apache.ibatis.scripting.xmltags.XMLDynamicLanguageDriver
callSettersOnNull
当结果集中含有NULL的时候，是否执行映射对象的setter方法或者Map的put方法。但是对于基础的int，boolean 等基础对象无效
true|false
false
logPrefix
指定MyBatis日志文件的后缀名
任何字符串
NotSet
logImpl
指定MyBatis中使用何种的日志处理程序，如果没有显示的指定的话，系统会自动尝试使用
SLF4J | LOG4J | LOG4J2 | JDK_LOGGING |  COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING
NotSet
proxyFactory
指定MyBatis用于延迟对象加载的动态代理工具
CGLIB|JAVASSIST
CGLIB -->
	<settings>
		<!--二级缓存的设置，和这个分页没多大关系-->
		<setting name="cacheEnabled" value="true"/>
		<setting name="lazyLoadingEnabled" value="true"/>
		<!--在启用加载时，有延迟加载属性，当启用时有延迟加载属性的对象
			在被调用时将会完全加载任意属性。否则，
			每种属性将会按需要加载。 -->
		<!--也就是，假设缓存的是Customer对象，如果设置为true，就算你访问order的属性
		    它也会加载Customer对象的属性，会执行两条sql-->
		<!-- <setting name="aggressiveLazyLoading" value="true"/> -->
		<setting name="aggressiveLazyLoading" value="false"/>
		<setting name="proxyFactory" value="CGLIB"/>
		<!--<setting name="logImpl" value="STDOUT_LOGGING" />-->
	</settings>
	<plugins>
		<!-- com.github.pagehelper为PageHelper类所在包名 -->
		<plugin interceptor="com.github.pagehelper.PageHelper">
			<!-- 4.0.0以后版本可以不设置该参数 -->
			<property name="dialect" value="mysql" />
			<!-- 该参数默认为false -->
			<!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 -->
			<!-- 和startPage中的pageNum效果一样 -->
			<property name="offsetAsPageNum" value="true" />
			<!-- 该参数默认为false -->
			<!-- 设置为true时，使用RowBounds分页会进行count查询 -->
			<property name="rowBoundsWithCount" value="true" />
			<!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->
			<!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型） -->
			<property name="pageSizeZero" value="true" />
			<!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 -->
			<!-- 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 -->
			<!-- 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 -->
			<property name="reasonable" value="false" />
			<!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 -->
			<!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 -->
			<!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,不配置映射的用默认值 -->
			<!-- 不理解该含义的前提下，不要随便复制该配置 -->
			<property name="params" value="pageNum=start;pageSize=limit;" />
		</plugin>
	</plugins>

</configuration>