<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 数据库模块配置 start -->
	<!-- 定义数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		  init-method="init" destroy-method="close">
		<!-- 链接地址、用户名、密码 -->
		<property name="url" value="${db.url}"/>
		<property name="username" value="${db.username}"/>
		<property name="password" value="${db.password}"/>
		<!-- 初始、最大、最小连接数 -->
		<property name="initialSize" value="${db.initialSize:10}"/>
		<property name="maxActive" value="${db.maxActive:100}"/>
		<property name="minIdle" value="${db.minIdle:10}"/>
		<!-- 获取连接等待超时的时间 -->
		<property name="maxWait" value="${db.maxWait:60000}"/>
		<!-- 间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis:60000}"/>
		<!-- 连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis:300000}"/>
		<property name="validationQuery" value="${db.validationQuery:SELECT 'x'}"/>
		<property name="testWhileIdle" value="${db.testWhileIdle:true}"/>
		<property name="testOnBorrow" value="${db.testOnBorrow:true}"/>
		<property name="testOnReturn" value="${db.testOnReturn:false}"/>
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="${db.poolPreparedStatements:false}"/>
		<property name="maxPoolPreparedStatementPerConnectionSize"
				  value="${db.maxPoolPreparedStatementPerConnectionSize:0}"/>
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${db.filters:slf4j}"/>
		<!-- 启用自动关闭长时间不使用连接的功能（怀疑存在连接泄漏时启用） -->
		<property name="removeAbandoned" value="${db.removeAbandoned:false}"/>
		<!-- 自动关闭超过1800秒未关闭的连接 -->
		<property name="removeAbandonedTimeout" value="${db.removeAbandonedTimeout:1800}"/>
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${db.logAbandoned:true}"/>
		<property name="connectionProperties" value="${db_props:config.decrypt=false}"/>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- <property name="mapperLocations" value="classpath:mybatis/*/*.xml" /> -->
		<property name="configLocation" value="classpath:mybatis-configuration.xml"/>
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"/>
		<constructor-arg index="1" value="SIMPLE"/>
	</bean>


	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.**.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<!-- the transactional advice (what happens; see the <aop:advisor/> bean below) -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true"/>
			<tx:method name="query*" read-only="true"/>
			<tx:method name="insert*" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" rollback-for="java.lang.Exception"/>
			<!--<tx:method name="*" propagation="SUPPORTS" />-->
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<!-- 事物加上包名，不给第三方接口service加事物 -->
		<aop:pointcut id="transactionAop" expression="execution(* com.nzgreens.console.service..*Service.*(..))" />
		<aop:advisor pointcut-ref="transactionAop" advice-ref="txAdvice"/>
	</aop:config>

	<tx:annotation-driven transaction-manager="transactionManager"/>

</beans>
